{"version":3,"sources":["components/ContactList/ContactList.module.css","App.module.css","components/Filter/Filter.module.css","components/ContactForm/ContactForm.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-reducers.js","redux/store.js","components/Loader/Loader.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","items","createReducer","_","payload","state","map","item","name","includes","toast","warn","success","filter","contact","id","loading","combineReducers","store","configureStore","reducer","contacts","contactsReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","devTools","process","App","type","color","height","width","style","position","top","left","transform","Component","axios","defaults","baseURL","getFilter","getLoading","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","trim","ContactForm","useState","setName","number","setNumber","isLoading","useSelector","dispatch","useDispatch","handleChange","e","currentTarget","value","onSubmit","post","then","data","catch","error","addContact","className","s","form","preventDefault","label","input","pattern","title","onChange","required","submitButton","ContactList","useEffect","get","onDelete","contactId","delete","deleteContact","length","contactList","contactItem","contactInfo","deleteButton","onClick","notification","Filter","Phonebook","app","autoClose","theme","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.03537db1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__2DfNs\",\"contactItem\":\"ContactList_contactItem__3FtCs\",\"contactInfo\":\"ContactList_contactInfo__tJYdO\",\"deleteButton\":\"ContactList_deleteButton__2CSi_\",\"notification\":\"ContactList_notification__1dafR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__3P5r6\",\"title\":\"App_title__1mTLy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__1i23P\",\"label\":\"Filter_label__28FzA\",\"input\":\"Filter_input__2do1e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1WSxL\",\"label\":\"ContactForm_label__3KWdd\",\"input\":\"ContactForm_input__U41Bf\",\"submitButton\":\"ContactForm_submitButton__vnsxw\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactsRequest = createAction(\r\n  'contacts/fetchContactsRequest',\r\n);\r\nexport const fetchContactsSuccess = createAction(\r\n  'contacts/fetchContactsSuccess',\r\n);\r\nexport const fetchContactsError = createAction(\r\n  'contacts/fetchContactsError',\r\n);\r\nexport const addContactRequest = createAction(\r\n  'contacts/addContactRequest',\r\n);\r\nexport const addContactSuccess = createAction(\r\n  'contacts/addContactSuccess',\r\n);\r\nexport const addContactError = createAction(\r\n  'contacts/addContactError',\r\n);\r\nexport const deleteContactRequest = createAction(\r\n  'contacts/deleteContactRequest',\r\n);\r\nexport const deleteContactSuccess = createAction(\r\n  'contacts/deleteContactSuccess',\r\n);\r\nexport const deleteContactError = createAction(\r\n  'contacts/deleteContactError',\r\n);\r\n\r\nexport const changeFilter = createAction(\r\n  'contacts/changeFilter',\r\n);\r\n","import {\r\n  createReducer,\r\n  combineReducers,\r\n} from '@reduxjs/toolkit';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  changeFilter,\r\n} from './contacts-actions';\r\n\r\nconst items = createReducer([], {\r\n  [fetchContactsSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => {\r\n    let namesArray = state.map(item => item.name);\r\n    if (!namesArray.includes(payload.name)) {\r\n      toast.success(\r\n        `${payload.name} successfully added to Phonebook!`,\r\n      );\r\n      return [...state, payload];\r\n    } else {\r\n      toast.warn(`${payload.name} is already exist!`);\r\n      // alert(`${payload.name} is already exist!`);\r\n      return state;\r\n    }\r\n  },\r\n  [deleteContactSuccess]: (state, { payload }) => {\r\n    state.filter(contact => contact.id !== payload);\r\n  },\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [fetchContactsRequest]: () => true,\r\n  [fetchContactsSuccess]: () => false,\r\n  [fetchContactsError]: () => false,\r\n\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n});\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport {\r\n  // persistStore,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport logger from 'redux-logger';\r\n\r\nimport contactsReducers from './contacts/contacts-reducers';\r\n\r\nconst getMiddleware = getDefaultMiddleware =>\r\n  process.env.NODE_ENV === 'development'\r\n    ? getDefaultMiddleware({\r\n        serializableCheck: {\r\n          ignoredActions: [\r\n            FLUSH,\r\n            REHYDRATE,\r\n            PAUSE,\r\n            PERSIST,\r\n            PURGE,\r\n            REGISTER,\r\n          ],\r\n        },\r\n      }).concat(logger)\r\n    : getDefaultMiddleware({\r\n        serializableCheck: {\r\n          ignoredActions: [\r\n            FLUSH,\r\n            REHYDRATE,\r\n            PAUSE,\r\n            PERSIST,\r\n            PURGE,\r\n            REGISTER,\r\n          ],\r\n        },\r\n      });\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducers,\r\n  },\r\n  middleware: getMiddleware,\r\n  devTools: process.env.NODE_ENV === 'development', // devTools применяются тлько в разработке\r\n});\r\n\r\n// const persistor = persistStore(store);\r\n\r\n// export default { store, persistor };\r\nexport default store;\r\n","import { Component } from 'react';\nimport Loader from 'react-loader-spinner';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <Loader\n        type=\"Rings\"\n        color=\"#3f51b5\"\n        height={80}\n        width={80}\n        style={{\n          position: 'fixed',\n          top: '50%',\n          left: '50%',\n          transform: 'translate(-50%, -50%)',\n        }}\n      />\n    );\n  }\n}\n","import axios from 'axios';\r\nimport {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n} from './contacts-actions';\r\n\r\naxios.defaults.baseURL =\r\n  'https://618fc2d9f6bf450017484a37.mockapi.io';\r\n\r\nexport const fetchContacts = () => dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n  // try {\r\n  //   const { data } = axios.get('/contacts');\r\n  //   dispatch(fetchContactsSuccess(data));\r\n  // } catch (error) {\r\n  //   dispatch(fetchContactsError(error));\r\n  // }\r\n\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) =>\r\n      dispatch(fetchContactsSuccess(data)),\r\n    )\r\n    .catch(error => dispatch(fetchContactsError(error)));\r\n};\r\n\r\nexport const addContact = (name, number) => dispatch => {\r\n  const contacts = { name, number };\r\n  dispatch(addContactRequest());\r\n  axios\r\n    .post('/contacts', contacts)\r\n    .then(({ data }) => dispatch(addContactSuccess(data)))\r\n    .catch(error => dispatch(addContactError(error)));\r\n};\r\n\r\nexport const deleteContact = contactId => dispatch => {\r\n  dispatch(deleteContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${contactId}`)\r\n    .then(() => dispatch(deleteContactSuccess(contactId)))\r\n    .catch(error => dispatch(deleteContactError(error)));\r\n};\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const getAllItems = state => state.contacts.items;\r\nexport const getFilter = state => state.contacts.filter;\r\nexport const getLoading = state => state.contacts.loading;\r\n\r\nexport const getVisibleContacts = createSelector(\r\n  [getAllItems, getFilter],\r\n  (items, filter) => {\r\n    const normalizedFilter = filter.toLowerCase().trim(' ');\r\n\r\n    return items.filter(({ name }) =>\r\n      name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  },\r\n);\r\n","// import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport {\n  // connect,\n  useSelector,\n  useDispatch,\n} from 'react-redux';\n\nimport Loader from '../Loader';\n\nimport { addContact } from '../../redux/contacts/contacts-operations';\nimport { getLoading } from '../../redux/contacts/contacts-selectors';\n\nimport s from './ContactForm.module.css';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const isLoading = useSelector(getLoading);\n  const dispatch = useDispatch();\n\n  // запись имени и номера телефона в стейт\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  // добавлено для dispatch\n  const onSubmit = (name, number) =>\n    dispatch(addContact(name, number));\n\n  // сброс стейта\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  // добавление контакта в список контактов и сброс инпутов\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    onSubmit(name, number);\n    resetForm();\n  };\n\n  return (\n    <form className={s.form} onSubmit={handleSubmit}>\n      <label className={s.label}>\n        Name\n        <input\n          className={s.input}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          value={name}\n          onChange={handleChange}\n          required\n        />\n      </label>\n\n      <label className={s.label}>\n        Number\n        <input\n          className={s.input}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          value={number}\n          onChange={handleChange}\n          required\n        />\n      </label>\n\n      <button\n        className={s.submitButton}\n        type=\"submit\"\n        // disabled={isLoading}\n      >\n        Add contact\n      </button>\n\n      {isLoading && <Loader />}\n    </form>\n  );\n}\n\n// ========== до использования useSelector и useDispatch ==========\n// const mapDispatchToProps = dispatch => ({\n//   onSubmit: (name, number) =>\n//     dispatch(addContact(name, number)),\n// });\n\n// export default connect(\n//   null,\n//   mapDispatchToProps,\n// )(ContactForm);\n\n// ContactForm.propTypes = {\n//   onSubmit: PropTypes.func.isRequired,\n// };\n","// import PropTypes from 'prop-types';\nimport { useEffect } from 'react';\nimport {\n  // connect,\n  useSelector,\n  useDispatch,\n} from 'react-redux';\n\nimport Loader from '../Loader';\n\nimport {\n  fetchContacts,\n  deleteContact,\n} from '../../redux/contacts/contacts-operations';\nimport {\n  getVisibleContacts,\n  getLoading,\n} from '../../redux/contacts/contacts-selectors';\n\nimport s from './ContactList.module.css';\n\nexport default function ContactList() {\n  const dispatch = useDispatch();\n\n  const isLoading = useSelector(getLoading);\n  const contacts = useSelector(getVisibleContacts);\n\n  useEffect(() => dispatch(fetchContacts()), [dispatch]);\n\n  const onDelete = contactId =>\n    dispatch(deleteContact(contactId));\n\n  return (\n    <>\n      {contacts.length !== 0 ? (\n        <ul className={s.contactList}>\n          {contacts.map(({ id, name, number }) => (\n            <li className={s.contactItem} key={id}>\n              <p className={s.contactInfo}>\n                {name}: {number}\n              </p>\n              <button\n                className={s.deleteButton}\n                id={id}\n                onClick={() => onDelete(id)}\n              >\n                Delete\n              </button>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p className={s.notification}>\n          There are no contacts...\n        </p>\n      )}\n\n      {isLoading && <Loader />}\n    </>\n  );\n}\n\n// ========== до использования useSelector и useDispatch ==========\n// const getVisibleContacts = (items, filter) => {\n//   const normalizedFilter = filter.toLowerCase();\n\n//   return items.filter(contact =>\n//     contact.name.toLowerCase().includes(normalizedFilter),\n//   );\n// };\n\n// const mapStateToProps = state => {\n//   console.log(state);\n//   const { items, filter } = state.contacts;\n\n//   const visibleContacts = getVisibleContacts(items, filter);\n//   return { contacts: visibleContacts };\n// };\n//\n// const mapDispatchToProps = dispatch => ({\n//   onDelete: id =>\n//     dispatch(ContactsOperations.deleteContact(id)),\n// });\n//\n// export default connect(\n//   mapStateToProps,\n//   mapDispatchToProps,\n// )(ContactList);\n//\n// ContactList.propTypes = {\n//   contacts: PropTypes.array.isRequired,\n//   onDelete: PropTypes.func.isRequired,\n// };\n","// import PropTypes from 'prop-types';\nimport {\n  // connect,\n  useSelector,\n  useDispatch,\n} from 'react-redux';\n\nimport Loader from '../Loader';\n\nimport { changeFilter } from '../../redux/contacts/contacts-actions';\nimport {\n  getFilter,\n  getLoading,\n} from '../../redux/contacts/contacts-selectors';\n\nimport s from './Filter.module.css';\n\nexport default function Filter() {\n  const isLoading = useSelector(getLoading);\n  const dispatch = useDispatch();\n\n  const value = useSelector(getFilter);\n  const onChange = e =>\n    dispatch(changeFilter(e.currentTarget.value));\n\n  return (\n    <div className={s.filter}>\n      <label className={s.label}>\n        Find contacts by name\n        <input\n          className={s.input}\n          type=\"text\"\n          value={value}\n          onChange={onChange}\n        />\n      </label>\n\n      {isLoading && <Loader />}\n    </div>\n  );\n}\n\n// ========== до использования useSelector и useDispatch ==========\n// const mapStateToProps = state => ({\n//   value: state.contacts.filter,\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onChange: evt =>\n//     dispatch(changeFilter(evt.currentTarget.value)),\n// });\n\n// export default connect(\n//   mapStateToProps,\n//   mapDispatchToProps,\n// )(Filter);\n\n// Filter.propTypes = {\n//   value: PropTypes.string.isRequired,\n//   onChange: PropTypes.func.isRequired,\n// };\n","import s from './App.module.css';\n\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\nimport { ToastContainer } from 'react-toastify';\n\nexport default function Phonebook() {\n  return (\n    <div className={s.app}>\n      <h1 className={s.title}>Phonebook</h1>\n      <ContactForm />\n      <h2 className={s.title}>Contacts</h2>\n      <Filter />\n      <ContactList />\n      <ToastContainer\n        autoClose={3000}\n        position=\"bottom-center\"\n        theme=\"colored\"\n      />\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport store from './redux/store';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate\n        loading={null}\n        persistor={store.persistor}\n      > */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}