{"version":3,"sources":["App.module.css","components/Filter/Filter.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-reducers.js","redux/store.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js","components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css"],"names":["module","exports","addContact","createAction","name","number","payload","id","uuidv4","deleteContact","changeFilter","items","createReducer","defaultContacts","actions","state","map","item","includes","alert","filter","contact","_","combineReducers","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","contacts","persistReducer","contactsReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","devTools","process","persistor","persistStore","connect","dispatch","onSubmit","ContactsActions","useState","setName","setNumber","handleChange","e","currentTarget","value","resetForm","className","s","form","preventDefault","label","input","type","pattern","title","onChange","required","submitButton","visibleContacts","normalizedFilter","toLowerCase","getVisibleContacts","onDelete","length","contactList","contactItem","contactInfo","deleteButton","onClick","notification","evt","Phonebook","app","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.81bc2895.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__3P5r6\",\"title\":\"App_title__1mTLy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__1i23P\",\"label\":\"Filter_label__28FzA\",\"input\":\"Filter_input__2do1e\"};","import { v4 as uuidv4 } from 'uuid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nconst addContact = createAction(\r\n  'contacts/Add',\r\n  (name, number) => {\r\n    return {\r\n      payload: {\r\n        id: uuidv4(),\r\n        name,\r\n        number,\r\n      },\r\n    };\r\n  },\r\n);\r\n\r\nconst deleteContact = createAction('contacts/Delete');\r\nconst changeFilter = createAction('contacts/changeFilter');\r\n\r\nexport default { addContact, deleteContact, changeFilter };\r\n\r\n// ========== vanilla Redux ==========\r\n// import { v4 as uuidv4 } from \"uuid\";\r\n// import { ADD, DELETE, CHANGE_FILTER } from \"./contacts-types\";\r\n\r\n// const addContact = (name, number) => ({\r\n//   type: ADD,\r\n//   payload: {\r\n//     id: uuidv4(),\r\n//     name,\r\n//     number,\r\n//   },\r\n// });\r\n\r\n// const deleteContact = (contactId) => ({\r\n//   type: DELETE,\r\n//   payload: contactId,\r\n// });\r\n\r\n// const changeFilter = (value) => ({\r\n//   type: CHANGE_FILTER,\r\n//   payload: value,\r\n// });\r\n\r\n// export { addContact, deleteContact, changeFilter }\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport { combineReducers } from 'redux';\r\nimport actions from './contacts-actions';\r\nimport defaultContacts from '../../contacts.json';\r\n\r\nconst items = createReducer(defaultContacts, {\r\n  [actions.addContact]: (state, { payload }) => {\r\n    let namesArray = state.map(item => item.name);\r\n    if (!namesArray.includes(payload.name)) {\r\n      return [payload, ...state];\r\n    } else {\r\n      alert(`${payload.name} is already exist`);\r\n      return state;\r\n    }\r\n  },\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(contact => contact.id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [actions.changeFilter]: (_, { payload }) => {\r\n    return payload;\r\n  },\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n\r\n// ========== vanilla Redux ==========\r\n// import { combineReducers } from \"redux\";\r\n// import { ADD, DELETE, CHANGE_FILTER } from \"./contacts-types\";\r\n// import defaultContacts from \"../../contacts.json\";\r\n\r\n// const items = (state = defaultContacts, { type, payload }) => {\r\n//   switch (type) {\r\n//     case ADD: {\r\n//       let namesArray = state.map((item) => item.name);\r\n//       if (!namesArray.includes(payload.name)) {\r\n//         return [payload, ...state];\r\n//       } else {\r\n//         alert(`${payload.name} is already exist`);\r\n//         return state;\r\n//       }\r\n//     }\r\n//     // case ADD:\r\n//     //   return [payload, ...state];\r\n\r\n//     case DELETE:\r\n//       return state.filter((contact) => contact.id !== payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filter = (state = \"\", { type, payload }) => {\r\n//   switch (type) {\r\n//     case CHANGE_FILTER:\r\n//       return payload;\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// export default combineReducers({\r\n//   items,\r\n//   filter,\r\n// });\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport logger from 'redux-logger';\r\n\r\nimport contactsReducers from './contacts/contacts-reducers';\r\n\r\nconst getMiddleware = getDefaultMiddleware =>\r\n  process.env.NODE_ENV === 'development'\r\n    ? getDefaultMiddleware({\r\n        serializableCheck: {\r\n          ignoredActions: [\r\n            FLUSH,\r\n            REHYDRATE,\r\n            PAUSE,\r\n            PERSIST,\r\n            PURGE,\r\n            REGISTER,\r\n          ],\r\n        },\r\n      }).concat(logger)\r\n    : getDefaultMiddleware({\r\n        serializableCheck: {\r\n          ignoredActions: [\r\n            FLUSH,\r\n            REHYDRATE,\r\n            PAUSE,\r\n            PERSIST,\r\n            PURGE,\r\n            REGISTER,\r\n          ],\r\n        },\r\n      });\r\n\r\nconst contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(\r\n      contactsPersistConfig,\r\n      contactsReducers,\r\n    ),\r\n  },\r\n  middleware: getMiddleware,\r\n  devTools: process.env.NODE_ENV === 'development', // devTools применяются тлько в разработке\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n\r\n// ========== vanilla Redux ==========\r\n// import { combineReducers, createStore } from 'redux';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\n// import contactsReducers from './contacts/contacts-reducers';\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: contactsReducers,\r\n// });\r\n\r\n// const store = createStore(\r\n//   rootReducer,\r\n//   composeWithDevTools(),\r\n// );\r\n\r\n// export default store;\r\n","import { useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ContactsActions from '../../redux/contacts/contacts-actions';\n\nimport s from './ContactForm.module.css';\n\nfunction ContactForm({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  // запись имени и номера телефона в стейт\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  // добавление контакта в список контактов и сброс инпутов\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    onSubmit(name, number);\n    resetForm();\n  };\n\n  // сброс стейта\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={s.form} onSubmit={handleSubmit}>\n      <label className={s.label}>\n        Name\n        <input\n          className={s.input}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          value={name}\n          onChange={handleChange}\n          required\n        />\n      </label>\n\n      <label className={s.label}>\n        Number\n        <input\n          className={s.input}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          value={number}\n          onChange={handleChange}\n          required\n        />\n      </label>\n\n      <button className={s.submitButton} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: (name, number) =>\n    dispatch(ContactsActions.addContact(name, number)),\n});\n\nexport default connect(\n  null,\n  mapDispatchToProps,\n)(ContactForm);\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ContactsActions from '../../redux/contacts/contacts-actions';\n\nimport s from './ContactList.module.css';\n\nfunction ContactList({ contacts, onDelete }) {\n  return (\n    <>\n      {contacts.length !== 0 ? (\n        <ul className={s.contactList}>\n          {contacts.map(({ id, name, number }) => (\n            <li className={s.contactItem} key={id}>\n              <p className={s.contactInfo}>\n                {name}: {number}\n              </p>\n              <button\n                className={s.deleteButton}\n                id={id}\n                onClick={() => onDelete(id)}\n              >\n                Delete\n              </button>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p className={s.notification}>\n          There are no contacts yet...\n        </p>\n      )}\n    </>\n  );\n}\n\nconst getVisibleContacts = (items, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n\n  return items.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter),\n  );\n};\n\nconst mapStateToProps = state => {\n  const { items, filter } = state.contacts;\n\n  const visibleContacts = getVisibleContacts(items, filter);\n  return { contacts: visibleContacts };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onDelete: id =>\n    dispatch(ContactsActions.deleteContact(id)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(ContactList);\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport ContactsActions from '../../redux/contacts/contacts-actions';\n\nimport s from './Filter.module.css';\n\nfunction Filter({ value, onChange }) {\n  return (\n    <div className={s.filter}>\n      <label className={s.label}>\n        Find contacts by name\n        <input\n          className={s.input}\n          type=\"text\"\n          value={value}\n          onChange={onChange}\n        />\n      </label>\n    </div>\n  );\n}\n\nconst mapStateToProps = state => ({\n  value: state.contacts.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: evt =>\n    dispatch(\n      ContactsActions.changeFilter(evt.currentTarget.value),\n    ),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Filter);\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n","import s from \"./App.module.css\";\n\nimport ContactForm from \"./components/ContactForm\";\nimport ContactList from \"./components/ContactList\";\nimport Filter from \"./components/Filter\";\n\nexport default function Phonebook() {\n  // const [contacts, setContacts] = useState(() => {\n  //   return (\n  //     JSON.parse(window.localStorage.getItem('contacts')) ??\n  //     defaultContacts\n  //   );\n  // });\n  // const [filter, setFilter] = useState('');\n\n  // useEffect(() => {\n  //   window.localStorage.setItem(\n  //     'contacts',\n  //     JSON.stringify(contacts),\n  //   );\n  // }, [contacts]);\n\n  // добавление контактов с проверкой на уникальность\n  // const addContact = ({ name, number }) => {\n  //   const newContact = {\n  //     id: uuidv4(),\n  //     name,\n  //     number,\n  //   };\n\n  //   if (contacts.some(contact => contact.name === name)) {\n  //     alert(`${name} is already exist`);\n  //   } else {\n  //     setContacts([newContact, ...contacts]);\n  //   }\n  // };\n\n  // удаление одного контакта по клику на кнопку \"Delete\"\n  // const removeContact = contactId => {\n  //   setContacts(contacts =>\n  //     contacts.filter(contact => contact.id !== contactId),\n  //   );\n  // };\n\n  // запись значения поля фильтра в стейт\n  // const changeFilter = e => {\n  //   setFilter(e.currentTarget.value);\n  // };\n\n  // получение списка контактов по значению из фильтра\n  // const getVisibleContacts = () => {\n  //   const normalizedFilter = filter.toLowerCase();\n\n  //   return contacts.filter(contact =>\n  //     contact.name.toLowerCase().includes(normalizedFilter),\n  //   );\n  // };\n\n  return (\n    <div className={s.app}>\n      <h1 className={s.title}>Phonebook</h1>\n      <ContactForm />\n      <h2 className={s.title}>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport store from './redux/store';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate\n        loading={null}\n        persistor={store.persistor}\n      >\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1WSxL\",\"label\":\"ContactForm_label__3KWdd\",\"input\":\"ContactForm_input__U41Bf\",\"submitButton\":\"ContactForm_submitButton__vnsxw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__2DfNs\",\"contactItem\":\"ContactList_contactItem__3FtCs\",\"contactInfo\":\"ContactList_contactInfo__tJYdO\",\"deleteButton\":\"ContactList_deleteButton__2CSi_\",\"notification\":\"ContactList_notification__1dafR\"};"],"sourceRoot":""}